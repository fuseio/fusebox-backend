apiVersion: apps/v1
kind: Deployment
metadata:
  name: amplitude
  namespace: {{ .Release.Namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app: amplitude
    environment: {{ .Values.global.environment }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      app: amplitude
      environment: {{ .Values.global.environment }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app: aamplitude
        environment: {{ .Values.global.environment }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                {{- range $zone := .Values.affinity.zones }}
                  - {{ $.Values.global.region }}-{{ $zone }}
                {{- end }}
      containers:
        - name: nginx:1.25.4-alpine
          imagePullPolicy: Always

          # Ports
          ports:
            - containerPort: 8888
              name: http
            - containerPort: 8888
              name: tcp

          # Probes
          livenessProbe:
            httpGet:
              path: /health
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 5

          # Resources
          resources:
            requests:
            {{- range $key, $val := .Values.resources.requests }}
              {{ $key }}: {{ $val | quote }}
            {{- end }}
            limits:
            {{- range $key, $val := .Values.resources.limits }}
              {{ $key }}: {{ $val | quote }}
            {{- end }}

          # Volume mounts (config.json)
          volumeMounts:
            - mountPath: /etc/nginx
              name: nginx
              readOnly: true
      
      # Volume (config.json)
      volumes:
        - name: nginx
          configMap:
            - key: nginx.conf
              path: nginx.conf
